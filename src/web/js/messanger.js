// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
let ws = null;
let isConnected = false;
let isAuthenticated = false;
let pingInterval = null;
let reconnectTimeout = null;

// === –≠–õ–ï–ú–ï–ù–¢–´ DOM ===
let messagesList, messageInput, sendBtn, connectionStatus;
let connectionDot, authDot, pingDot;

// === –£–¢–ò–õ–ò–¢–´ ===
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function formatTime(date) {
    return date.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
    });
}

// === WEBSOCKET –õ–û–ì–ò–ö–ê ===
function connect() {
    updateConnectionStatus("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");

    try {
        ws = new WebSocket(CONFIG.WS_URL);

        ws.onopen = function () {
            console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É");
            isConnected = true;
            updateStatusIndicators();
            updateConnectionStatus("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...");
            sendAuth();
            startPing();
        };

        ws.onmessage = function (event) {
            try {
                const response = JSON.parse(event.data);
                handleMessage(response);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", error);
                addSystemMessage("–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            }
        };

        ws.onerror = function (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket:", error);
            updateConnectionStatus("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
            scheduleReconnect();
        };

        ws.onclose = function (event) {
            console.log("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –∫–æ–¥:", event.code);
            isConnected = false;
            isAuthenticated = false;
            updateStatusIndicators();
            updateConnectionStatus("–û—Ç–∫–ª—é—á–µ–Ω");
            disableInput();
            stopPing();

            if (event.code !== 1000) {
                scheduleReconnect();
            }
        };

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:", error);
        updateConnectionStatus("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
        scheduleReconnect();
    }
}

function disconnect() {
    if (reconnectTimeout) {
        clearTimeout(reconnectTimeout);
        reconnectTimeout = null;
    }

    if (ws) {
        ws.close(1000);
    }
}

function scheduleReconnect() {
    if (reconnectTimeout) return;

    updateConnectionStatus("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...");
    reconnectTimeout = setTimeout(() => {
        reconnectTimeout = null;
        connect();
    }, CONFIG.RECONNECT_DELAY);
}

function sendAuth() {
    const authMessage = {
        type: "auth",
        token: CONFIG.AUTH_TOKEN
    };

    if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify(authMessage));
    }
}

function sendMessage(text) {
    const message = {
        type: "message",
        data: text,
        timestamp: new Date().toISOString()
    };

    if (ws && ws.readyState === WebSocket.OPEN && isAuthenticated) {
        ws.send(JSON.stringify(message));
        addMessage("–í—ã", text, new Date(), true);
        return true;
    }
    return false;
}

function sendPing() {
    if (ws && ws.readyState === WebSocket.OPEN) {
        const pingMessage = { type: "ping" };
        ws.send(JSON.stringify(pingMessage));

        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø–∏–Ω–≥–∞
        pingDot.classList.add('active');
        setTimeout(() => {
            pingDot.classList.remove('active');
        }, 200);
    }
}

// === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
function handleMessage(response) {
    switch (response.type) {
        case "auth":
            console.log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", response);

            if (response.message === "AUTH_RESPONSE") {
                console.log("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
                isAuthenticated = true;
                updateStatusIndicators();
                updateConnectionStatus("–ü–æ–¥–∫–ª—é—á—ë–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
                enableInput();
                addSystemMessage("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
            }
            else {
                console.log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å");
                addSystemMessage("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
            }
            break;

        case "message":
            console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", response.data);
            addMessage("–°–µ—Ä–≤–µ—Ä", response.data, new Date(response.timestamp));
            break;

        case "pong":
            console.log("üèì Pong –ø–æ–ª—É—á–µ–Ω");
            break;

        case "error":
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", response.message);
            addSystemMessage("–û—à–∏–±–∫–∞: " + response.message);
            break;

        default:
            console.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", response.type);
    }
}

// === UI –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
function updateStatusIndicators() {
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connectionDot.className = 'indicator-dot';
    if (isConnected) {
        connectionDot.classList.add('connected');
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    authDot.className = 'indicator-dot';
    if (isAuthenticated) {
        authDot.classList.add('connected');
    } else if (isConnected) {
        authDot.classList.add('warning');
    }

    // Ping (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏)
    pingDot.className = 'indicator-dot';
    if (isConnected) {
        pingDot.classList.add('connected');
    }
}

function updateConnectionStatus(status) {
    connectionStatus.textContent = status;
}

function enableInput() {
    messageInput.disabled = false;
    sendBtn.disabled = false;
    messageInput.focus();
}

function disableInput() {
    messageInput.disabled = true;
    sendBtn.disabled = true;
}

function addMessage(sender, text, timestamp = new Date(), isOwn = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isOwn ? 'own' : ''}`;

    messageDiv.innerHTML = `
        <div class="message-header">
            <span class="message-author">${escapeHtml(sender)}</span>
            <span class="message-time">${formatTime(timestamp)}</span>
        </div>
        <div class="message-content">${escapeHtml(text)}</div>
    `;

    messagesList.appendChild(messageDiv);
    messagesList.scrollTop = messagesList.scrollHeight;
}

function addSystemMessage(text) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message system';

    messageDiv.innerHTML = `
        <div class="message-header">
            <span class="message-author">–°–∏—Å—Ç–µ–º–∞</span>
            <span class="message-time">${formatTime(new Date())}</span>
        </div>
        <div class="message-content">${escapeHtml(text)}</div>
    `;

    messagesList.appendChild(messageDiv);
    messagesList.scrollTop = messagesList.scrollHeight;
}

// === PING –°–ò–°–¢–ï–ú–ê ===
function startPing() {
    if (pingInterval) stopPing();
    pingInterval = setInterval(sendPing, CONFIG.PING_INTERVAL);
}

function stopPing() {
    if (pingInterval) {
        clearInterval(pingInterval);
        pingInterval = null;
    }
}

// === EVENT LISTENERS ===
function setupEventListeners() {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    sendBtn.addEventListener('click', function () {
        const text = messageInput.value.trim();
        if (text && sendMessage(text)) {
            messageInput.value = '';
        }
    });

    // Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    messageInput.addEventListener('keypress', function (e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendBtn.click();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', function () {
        disconnect();
    });
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', function () {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
    messagesList = document.getElementById('chat-messages');
    messageInput = document.getElementById('message-input');
    sendBtn = document.getElementById('send-btn');
    connectionStatus = document.getElementById('connection-status');
    connectionDot = document.getElementById('connection-dot');
    authDot = document.getElementById('auth-dot');
    pingDot = document.getElementById('ping-dot');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setupEventListeners();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    updateStatusIndicators();
    disableInput();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    addSystemMessage("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
    setTimeout(connect, 500);
});